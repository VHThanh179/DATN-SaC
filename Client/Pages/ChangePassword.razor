@page "/changepass"
@using System.Net;
@using Share.Models;
@using Newtonsoft.Json
@inject IJSRuntime IJSRuntime
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject NavigationManager NavigationManager
@layout WebLayout

<style>
    :root {
        --input-padding-x: 1.5rem;
        --input-padding-y: .75rem;
    }

    .card-signin {
        border: 0;
        border-radius: 1rem;
        box-shadow: 0 0.5rem 1rem 0 rgba(0, 0, 0, 0.1);
    }

        .card-signin .card-title {
            margin-bottom: 2rem;
            font-weight: 300;
            font-size: 1.5rem;
        }

        .card-signin .card-body {
            padding: 2rem;
        }

    .form-signin {
        width: 100%;
    }

        .form-signin .btn {
            font-size: 80%;
            border-radius: 5rem;
            letter-spacing: .1rem;
            font-weight: bold;
            padding: 1rem;
            transition: all 0.2s;
        }

    .form-label-group {
        position: relative;
        margin-bottom: 1rem;
    }

        .form-label-group input {
            height: auto;
            border-radius: 2rem;
        }

        .form-label-group > input,
        .form-label-group > label {
            padding: var(--input-padding-y) var(--input-padding-x);
        }

        .form-label-group > label {
            position: absolute;
            top: 0;
            left: 0;
            display: block;
            width: 100%;
            margin-bottom: 0;
            line-height: 1.5;
            color: #495057;
            border: 1px solid transparent;
            border-radius: .25rem;
            transition: all .1s ease-in-out;
        }

        .form-label-group input::-webkit-input-placeholder {
            color: transparent;
        }

        .form-label-group input:-ms-input-placeholder {
            color: transparent;
        }

        .form-label-group input::-ms-input-placeholder {
            color: transparent;
        }

        .form-label-group input::-moz-placeholder {
            color: transparent;
        }

        .form-label-group input::placeholder {
            color: transparent;
        }

        .form-label-group input:not(:placeholder-shown) {
            padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));
            padding-bottom: calc(var(--input-padding-y) / 3);
        }

            .form-label-group input:not(:placeholder-shown) ~ label {
                padding-top: calc(var(--input-padding-y) / 3);
                padding-bottom: calc(var(--input-padding-y) / 3);
                font-size: 12px;
                color: #777;
            }

    .btn-google {
        color: white;
        background-color: #ea4335;
    }

    .btn-facebook {
        color: white;
        background-color: #3b5998;
    }

    /* Fallback for Edge
    -------------------------------------------------- */

</style>
<br />
<br />
<Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(1)">
    <div class="mt-2">
        <div class="container">
            <div class="row">
                <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
                    <div class="card card-signin my-5">
                        <div class="card-body">
                            <h5 class="card-title text-center fw-bold">ĐỔI MẬT KHẨU</h5>
                            @*NOTE: Dùng onsubmit gọi hàm SubmitForm khi click vào nút Lưu*@
                            <form @onsubmit="SubmitForm">
                                @*<EditForm Model="@customer" OnValidSubmit="@SubmitForm" class="form-signin">*@
                                <div class="form-label-group">
                                    <input type="password" id="oldPassword" class="form-control" @bind="@oldPass" placeholder="Mật khẩu cũ" required>
                                    <label for="oldPassword">Mật khẩu cũ</label>
                                </div>
                                <div class="form-label-group">
                                    <input type="password" id="inputPassword" class="form-control" @bind="@newPass" placeholder="Mật khẩu mới" required>
                                    <label for="inputPassword">Mật khẩu</label>
                                </div>
                                <div class="form-label-group">
                                    <input type="password" id="inputConfirmPassword" class="form-control" @bind="@confirmPass" placeholder="Xác nhận mật khẩu" required>
                                    <label for="inputConfirmPassword">Xác nhận mật khẩu</label>
                                </div>
                                <div class="d-grid">
                                    <input value="Lưu" type="submit" class="btn btn-lg btn-dark btn-block text-uppercase" />
                                </div>
                                @*</EditForm>*@
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</Animate>
@code {
    // NOTE: Các property cần có
    public Customer customer { get; set; }
    public int customerId { get; set; }
    public string oldPass = "";
    public string newPass = "";
    public string confirmPass = "";
    public string encodePass = "";
    private async Task SubmitForm()
    {
        // NOTE: Lấy id của khách hàng bằng session
        customerId = sessionStorage.GetItem<int>("customerId");
        var apiUrl = config.GetSection("API")["APIUrl"].ToString();
        var accessToken = sessionStorage.GetItem<string>("AccessToken");
        customer = new Customer();
        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
            client.BaseAddress = new Uri(apiUrl);
            using (var response = await client.GetAsync("customer/GetPass/?pass=" + oldPass))
            {
                // NOTE: Mật khẩu cũ sau khi encode sẽ gán cho biến encodePass
                encodePass = await response.Content.ReadAsStringAsync();
                Console.WriteLine(encodePass);
            }
            customer = new Customer();
            // NOTE: Lấy ra khách hàng theo id
            using (var response = await client.GetAsync("customer/?id=" + customerId))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                customer = JsonConvert.DeserializeObject<Customer>(apiResponse);
            }
            // NOTE: So sánh pass cũ đã encode với pass trong db
            if (string.Equals(encodePass, customer.Password))
            {
                // NOTE: So sánh pass mới với confirm pass
                if (string.Equals(newPass, confirmPass))
                {
                    // NOTE: Gán pass của customer hiện tại = pass mới
                    // NOTE: Phải gán cả cho confirmPass của customer hiện tại nếu không sẽ bị lỗi confirmPass is null
                    customer.Password = newPass;
                    customer.ConfirmPassword = newPass;
                    StringContent content = new StringContent(JsonConvert.SerializeObject(customer), System.Text.Encoding.UTF8, "application/json");
                    HttpResponseMessage response = await client.PutAsync("customer/?id=" + customerId, content);
                    if (response.StatusCode != HttpStatusCode.OK) { }
                    else
                    {
                        string apiResponse = await response.Content.ReadAsStringAsync();
                        if (apiResponse == "-1")
                        {

                        }
                        else // Change pass successfully
                        {
                            NavigationManager.NavigateTo("/logout", true);
                        }
                    }
                }
                else
                {
                    Console.WriteLine("Mật khẩu mới và xác nhận mật khẩu mới không khớp");
                }
            }
            else
            {
                Console.WriteLine("Mật khẩu cũ không đúng");
            }
        }
    }
}

@page "/register"
@using System.Net;
@using Share.Models;
@using Newtonsoft.Json
@using Blazored.Toast
@using Blazored.Toast.Services
@inject IJSRuntime IJSRuntime
@inject IToastService toastService
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject NavigationManager NavigationManager
@layout InnerPageLayout
<style>
    :root {
        --input-padding-x: 1.5rem;
        --input-padding-y: .75rem;
    }

    .card-signin {
        border: 0;
        border-radius: 1rem;
        box-shadow: 0 0.5rem 1rem 0 rgba(0, 0, 0, 0.1);
    }

        .card-signin .card-title {
            margin-bottom: 2rem;
            font-weight: 300;
            font-size: 1.5rem;
        }

        .card-signin .card-body {
            padding: 2rem;
        }

    .form-signin {
        width: 100%;
    }

        .form-signin .btn {
            font-size: 80%;
            border-radius: 5rem;
            letter-spacing: .1rem;
            font-weight: bold;
            padding: 1rem;
            transition: all 0.2s;
        }

    .form-label-group {
        position: relative;
        margin-bottom: 1rem;
    }

        .form-label-group input {
            height: auto;
            border-radius: 2rem;
        }

        .form-label-group > input,
        .form-label-group > label {
            padding: var(--input-padding-y) var(--input-padding-x);
        }

        .form-label-group > label {
            position: absolute;
            top: 0;
            left: 0;
            display: block;
            width: 100%;
            margin-bottom: 0;
            line-height: 1.5;
            color: #495057;
            border: 1px solid transparent;
            border-radius: .25rem;
            transition: all .1s ease-in-out;
        }

        .form-label-group input::-webkit-input-placeholder {
            color: transparent;
        }

        .form-label-group input:-ms-input-placeholder {
            color: transparent;
        }

        .form-label-group input::-ms-input-placeholder {
            color: transparent;
        }

        .form-label-group input::-moz-placeholder {
            color: transparent;
        }

        .form-label-group input::placeholder {
            color: transparent;
        }

        .form-label-group input:not(:placeholder-shown) {
            padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));
            padding-bottom: calc(var(--input-padding-y) / 3);
        }

            .form-label-group input:not(:placeholder-shown) ~ label {
                padding-top: calc(var(--input-padding-y) / 3);
                padding-bottom: calc(var(--input-padding-y) / 3);
                font-size: 12px;
                color: #777;
            }

    .btn-google {
        color: white;
        background-color: #ea4335;
    }

    .btn-facebook {
        color: white;
        background-color: #3b5998;
    }

    #button {
        background-color: #009688;
        border: none;
        border-radius: 5px;
        color: #FFFFFF;
        font-weight: 700;
        width: 60px;
    }

    #button-cancel {
        background-color: #009688;
        border: none;
        border-radius: 5px;
        color: #FFFFFF;
        font-weight: 700;
        width: 100px;
    }

    .e-popup.e-popup-open.e-dialog {
        border-radius: 20px;
    }

    .e-dialog .e-dlg-header-content {
        background-color: #689F38;
        border-radius: 20px 20px 0px 0px;
    }

        .e-dialog .e-dlg-header-content + .e-dlg-content {
            padding: 0;
        }

    .e-dialog .e-dlg-header {
        position: relative;
        font-size: 25px;
        font-weight: bold;
        color: linen;
        margin-left: 10px;
    }

    .e-dialog .e-footer-content {
        padding: 15px;
        border-radius: 0px 0px 20px 20px;
    }

    .e-dialog .e-dlg-header-content {
        padding: 6px;
    }

    .dialogText {
        color: #33691E;
        font-size: 20px;
        margin: 32px;
        font-weight: 700;
    }

    .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {
        margin-right: 10px;
    }

    .e-dialog .e-dlg-header-content .e-icon-dlg-close {
        color: #FFFFFF;
    }

    .e-dlg-header, .e-dlg-header * {
        color: #FFFFFF;
    }

    /* Fallback for Edge
    -------------------------------------------------- */

</style>
<br />
<br />
<Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(1)">
    <div class="mt-2">
        <div class="container">
            <div class="row">
                <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
                    <div class="card card-signin my-5">
                        <div class="card-body">
                            <EditForm Model="@customer" OnValidSubmit="@SubmitForm" class="form-signin">
                                <DataAnnotationsValidator />
                                <h6 class="card-title text-center fw-bold">TẠO TÀI KHOẢN MỚI</h6>
                                <hr class="my-4">
                                <div class="form-label-group">
                                    <input @bind="customer.Email" type="email" id="inputEmail" class="form-control" placeholder="Địa chỉ mail" required autofocus>
                                    <label for="inputEmail">Địa chỉ mail</label>
                                    <span class="text-danger font-weight-bold text-center"><ValidationMessage For="@(() => customer.Email)" /></span>
                                </div>
                                <div class="form-label-group">
                                    <input @bind="customer.FullName" type="text" id="inputFullname" class="form-control" placeholder="Họ tên" required>
                                    <label for="inputFullname">Họ tên</label>
                                    <span class="text-danger font-weight-bold text-center"><ValidationMessage For="@(() => customer.FullName)" /></span>
                                </div>
                                <div class="form-label-group">
                                    <input @bind="customer.DoB" type="date" id="dob" class="form-control" placeholder="Ngày sinh" required>
                                    <label for="dob">Ngày sinh</label>
                                    <span class="text-danger font-weight-bold text-center"><ValidationMessage For="@(() => customer.DoB)" /></span>
                                </div>
                                <div class="form-label-group">
                                    <input @bind="customer.Address" type="text" id="address" class="form-control" placeholder="Địa chỉ" required>
                                    <label for="address">Địa chỉ</label>
                                    <span class="text-danger font-weight-bold text-center"><ValidationMessage For="@(() => customer.Address)" /></span>
                                </div>
                                <div class="form-label-group">
                                    <input @bind="customer.PhoneNumber" type="tel" id="phone" class="form-control" placeholder="Số điện thoại" required>
                                    <label for="phone">Số điện thoại</label>
                                    <span class="text-danger font-weight-bold text-center"><ValidationMessage For="@(() => customer.PhoneNumber)" /></span>                                  
                                </div>
                                <div class="form-label-group">
                                    <input @bind="customer.Password" type="password" id="inputPassword" class="form-control" placeholder="Mật khẩu" required>
                                    <label for="inputPassword">Mật khẩu</label>
                                    <span class="text-danger font-weight-bold text-center"><ValidationMessage For="@(() => customer.Password)" /></span>
                                </div>
                                <div class="form-label-group">
                                    <input @bind="customer.ConfirmPassword" type="password" id="inputConfirmPassword" class="form-control" placeholder="Xác nhận mật khẩu" required>
                                    <label for="inputConfirmPassword">Xác nhận mật khẩu</label>
                                    <span class="text-danger font-weight-bold text-center"><ValidationMessage For="@(() => customer.ConfirmPassword)" /></span>
                                </div>
                                <hr class="my-4">
                                <div class="d-grid">
                                    <button type="submit" class="btn btn-lg btn-dark btn-block text-uppercase">Đăng ký</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</Animate>

<SfDialog Width="509px" Height="220px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogTemplates>
        <Header><i class="fa fa-check"></i> Thông báo!</Header>
        <Content>
            <h1 class="dialogText">Đăng nhập để sử dụng nhiều dịch vụ hơn!</h1>
        </Content>
        <FooterTemplate>
            <button id="button" @onclick="@NaviLogin" class="e-control e-btn" data-ripple="true">OK</button>
            <button id="button-cancel" @onclick="@NaviHome" class="e-control e-btn" data-ripple="true">Trang chủ</button>
        </FooterTemplate>
    </DialogTemplates>
    <DialogAnimationSettings Effect="DialogEffect.FlipXDown" Duration=600 />
</SfDialog>

@code {
    Share.Models.Customer customer = new Share.Models.Customer();
    private ToastParameters _toastParameters;
    private bool isEmailExisted = false;
    private bool isPhoneNumberExisted = false;
    //Life cycle
    protected override void OnInitialized()
    {
        customer.CreatedDate = DateTime.Now;
        customer.Status = true;
    }
    private async void SubmitForm()
    {
        _toastParameters = new ToastParameters();
        var apiUrl = config.GetSection("API")["APIUrl"].ToString();
        var accessToken = sessionStorage.GetItem<string>("AccessToken");
        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
            client.BaseAddress = new Uri(apiUrl);
            using (var resEmail = await client.GetAsync("Customer/CheckMail/?email=" + customer.Email))
            {
                var email = await resEmail.Content.ReadAsStringAsync();
                isEmailExisted = bool.Parse(email);
            }
            using (var resPhoneNumber = await client.GetAsync("Customer/CheckPhoneNumber/?phoneNumber=" + customer.PhoneNumber))
            {
                var phoneNumber = await resPhoneNumber.Content.ReadAsStringAsync();
                isPhoneNumberExisted = bool.Parse(phoneNumber);
            }
            if (!isEmailExisted && !isPhoneNumberExisted)
            {
                StringContent content = new StringContent(JsonConvert.SerializeObject(customer), System.Text.Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync("customer", content);

                if (response.StatusCode != HttpStatusCode.OK)
                {

                }
                else
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    if (apiResponse == "-1")
                    {
                        _toastParameters.Add(nameof(Notification.Title), "Đăng ký thành viên thất bại!");
                        _toastParameters.Add(nameof(Notification.IsSuccess), false);
                        toastService.ShowToast<Notification>(_toastParameters);
                    }
                    else
                    {
                        OpenDialog();
                    }
                }
            }
            else
            {
                if (isEmailExisted && isPhoneNumberExisted)
                {
                    _toastParameters.Add(nameof(Notification.Title), "Địa chỉ email này đã tồn tại! Số điện thoại đã tồn tại!");
                    _toastParameters.Add(nameof(Notification.IsSuccess), false);
                    toastService.ShowToast<Notification>(_toastParameters);
                }
                else
                {
                    if (isEmailExisted)
                    {
                        _toastParameters.Add(nameof(Notification.Title), "Địa chỉ email đã tồn tại!");
                        _toastParameters.Add(nameof(Notification.IsSuccess), false);
                        toastService.ShowToast<Notification>(_toastParameters);
                    }
                    if (isPhoneNumberExisted)
                    {
                        _toastParameters.Add(nameof(Notification.Title), "Số điện thoại đã tồn tại!");
                        _toastParameters.Add(nameof(Notification.IsSuccess), false);
                        toastService.ShowToast<Notification>(_toastParameters);
                    }
                }
            }
        }
    }

    private bool IsVisible { get; set; }

    private void OpenDialog()
    {
        IsVisible = true;
    }

    private void NaviLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void NaviHome()
    {
        NavigationManager.NavigateTo("/");
    }
}

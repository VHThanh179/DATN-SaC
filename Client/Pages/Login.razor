@page "/login"
@using System.Web;
@using System.Net;
@using System.ComponentModel.DataAnnotations;
@using Share.Models.ViewModels
@layout InnerPageLayout
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject IJSRuntime JSRuntime
<style>
      :root {
          --input-padding-x: 1.5rem;
          --input-padding-y: .75rem;
      }

      .card-signin {
          border: 0;
          border-radius: 1rem;
          box-shadow: 0 0.5rem 1rem 0 rgba(0, 0, 0, 0.1);
      }

          .card-signin .card-title {
              margin-bottom: 2rem;
              font-weight: 300;
              font-size: 1.5rem;
          }

          .card-signin .card-body {
              padding: 2rem;
          }

      .form-signin {
          width: 100%;
      }

          .form-signin .btn {
              font-size: 80%;
              border-radius: 5rem;
              letter-spacing: .1rem;
              font-weight: bold;
              padding: 1rem;
              transition: all 0.2s;
          }

      .form-label-group {
          position: relative;
          margin-bottom: 1rem;
      }

          .form-label-group input {
              height: auto;
              border-radius: 2rem;
          }

          .form-label-group > input,
          .form-label-group > label {
              padding: var(--input-padding-y) var(--input-padding-x);
          }

          .form-label-group > label {
              position: absolute;
              top: 0;
              left: 0;
              display: block;
              width: 100%;
              margin-bottom: 0;
              line-height: 1.5;
              color: #495057;
              border: 1px solid transparent;
              border-radius: .25rem;
              transition: all .1s ease-in-out;
          }

          .form-label-group input::-webkit-input-placeholder {
              color: transparent;
          }

          .form-label-group input:-ms-input-placeholder {
              color: transparent;
          }

          .form-label-group input::-ms-input-placeholder {
              color: transparent;
          }

          .form-label-group input::-moz-placeholder {
              color: transparent;
          }

          .form-label-group input::placeholder {
              color: transparent;
          }

          .form-label-group input:not(:placeholder-shown) {
              padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));
              padding-bottom: calc(var(--input-padding-y) / 3);
          }

              .form-label-group input:not(:placeholder-shown) ~ label {
                  padding-top: calc(var(--input-padding-y) / 3);
                  padding-bottom: calc(var(--input-padding-y) / 3);
                  font-size: 12px;
                  color: #777;
              }

      .btn-google {
          color: white;
          background-color: #ea4335;
      }

      .btn-facebook {
          color: white;
          background-color: #3b5998;
      }

      /* Fallback for Edge
    -------------------------------------------------- */

</style>
<br />
<br />
<Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(1)">
    <div class="mt-2">
        <div class="container">
            <div class="row">
                <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
                    <div class="card card-signin my-5">
                        <div class="card-body">
                            <h5 class="card-title text-center fw-bold">ĐĂNG NHẬP HỆ THỐNG</h5>
                            <form class="form-signin" @onsubmit="Checklogin">
                                <div class="form-label-group">
                                    <input type="text" id="inputEmail" @bind="@email" class="form-control" placeholder="Email address" required autofocus>
                                    <label for="inputEmail">Địa chỉ mail</label>
                                </div>

                                <div class="form-label-group">
                                    <input type="password" id="inputPassword" @bind="@password" @onkeypress="Enter" class="form-control" placeholder="Password" required>
                                    <label for="inputPassword">Mật khẩu</label>
                                </div>

                                <div class="custom-control custom-checkbox mb-3">
                                    <input type="checkbox" class="custom-control-input" id="customCheck1">
                                    <label class="custom-control-label" for="customCheck1">Ghi nhớ mật khẩu</label>
                                </div>
                                <div class="d-grid">
                                    <button class="btn btn-lg btn-dark btn-block text-uppercase" type="submit">Đăng nhập</button>
                                </div>
                                @if (!string.IsNullOrEmpty(error))
                                {
                                    <div class="alert alert-danger mt-3 mb-0">@((MarkupString)error)</div>
                                }
                                <hr class="my-4">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-lg btn-google btn-block text-uppercase" type="submit"><i class="fab fa-google mr-2"></i> Đăng nhập với Google</button>
                                    <button class="btn btn-lg btn-facebook btn-block text-uppercase" type="submit"><i class="fab fa-facebook-f mr-2"></i> Đăng nhập với Facebook</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</Animate>

@code {
    private bool loading;
    private string error;
    string email = "";
    string password = "";
    private string name;
    protected override void OnInitialized()
    {

    }
    private string Encode(string param)
    {
        return HttpUtility.UrlEncode(param);
    }
    public void Enter(KeyboardEventArgs e)
    {
        if(e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if(password != string.Empty || password != "")
            {
                Checklogin();
            }
        }
    }
    private async Task Checklogin()
    {
        error = "";
        if (email == "")
        {
            error = " - Bạn cần nhập email.";
        }
        if (password == "")
        {
            error += (error == "" ? "" : "<br/>") + " - Bạn cần nhập password.";
        }
        if (error == "")
        {
            var apiUrl = config.GetSection("API")["APIUrl"].ToString();
            using (var client = new HttpClient())
            {
                ViewWebLogin viewWebLogin = new ViewWebLogin() { Email = email, Password = password };
                client.DefaultRequestHeaders.Add("Access-Control-Alow-Origin", "*");
                StringContent content = new StringContent(JsonConvert.SerializeObject(viewWebLogin),
                    System.Text.Encoding.UTF8,
                    "application/json");
                HttpResponseMessage response = await client.PostAsync(apiUrl + "Token", content);
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    error += (error == "" ? "" : "<br/>") + "- Lỗi khi gọi API.";

                }
                else
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    var list = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ViewToken>>(apiResponse);
                    if (list.Count > 0)
                    {
                        var viewToken = list[0];
                        var accessToken = viewToken.Token;
                        sessionStorage.SetItem("customerId", viewToken.customerID);
                        sessionStorage.SetItem("Email", email);
                        sessionStorage.SetItem("AccessToken", accessToken);
                        //await JSRuntime.InvokeAsync<object>("refreshMenu", new { email = email });
                        NavigationManager.NavigateTo("/", true);

                    }
                }
            }
        }
    }

}

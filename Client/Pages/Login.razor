@page "/login"
@using System.Web;
@using System.Net;
@using Blazored.Toast
@using Blazored.Toast.Services
@using System.ComponentModel.DataAnnotations
@using Share.Models.ViewModels
@using Syncfusion.Blazor.Popups
@layout InnerPageLayout
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject IJSRuntime JSRuntime
@inject IToastService toastService

<style>
    :root {
        --input-padding-x: 1.5rem;
        --input-padding-y: .75rem;
    }

    .card-signin {
        border: 0;
        border-radius: 1rem;
        box-shadow: 0 0.5rem 1rem 0 rgba(0, 0, 0, 0.1);
    }

        .card-signin .card-title {
            margin-bottom: 2rem;
            font-weight: 300;
            font-size: 1.5rem;
        }

        .card-signin .card-body {
            padding: 2rem;
        }

    .form-signin {
        width: 100%;
    }

        .form-signin .btn {
            font-size: 80%;
            border-radius: 5rem;
            letter-spacing: .1rem;
            font-weight: bold;
            padding: 1rem;
            transition: all 0.2s;
        }

    .form-label-group {
        position: relative;
        margin-bottom: 1rem;
    }

        .form-label-group input {
            height: auto;
            border-radius: 2rem;
        }

        .form-label-group > input,
        .form-label-group > label {
            padding: var(--input-padding-y) var(--input-padding-x);
        }

        .form-label-group > label {
            position: absolute;
            top: 0;
            left: 0;
            display: block;
            width: 100%;
            margin-bottom: 0;
            line-height: 1.5;
            color: #495057;
            border: 1px solid transparent;
            border-radius: .25rem;
            transition: all .1s ease-in-out;
        }

        .form-label-group input::-webkit-input-placeholder {
            color: transparent;
        }

        .form-label-group input:-ms-input-placeholder {
            color: transparent;
        }

        .form-label-group input::-ms-input-placeholder {
            color: transparent;
        }

        .form-label-group input::-moz-placeholder {
            color: transparent;
        }

        .form-label-group input::placeholder {
            color: transparent;
        }

        .form-label-group input:not(:placeholder-shown) {
            padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));
            padding-bottom: calc(var(--input-padding-y) / 3);
        }

            .form-label-group input:not(:placeholder-shown) ~ label {
                padding-top: calc(var(--input-padding-y) / 3);
                padding-bottom: calc(var(--input-padding-y) / 3);
                font-size: 12px;
                color: #777;
            }

    .btn-google {
        color: white;
        background-color: #ea4335;
    }

    .btn-facebook {
        color: white;
        background-color: #3b5998;
    }

    /*.ds {
        text-align: center;
        font-weight: bold;
        font-size: 18px;
    }

    .e-dlg-content {
        display: flex !important;
        align-items: center !important;
        justify-content: space-around !important;
    }

    .e-dialog {
        border-radius: 30px;
    }

    .e-footer-content,
    .e-dlg-header-content {
        background: transparent;
    }*/

    #button {
        background-color: #E53935;
        border: none;
        border-radius: 5px;
        font-weight: 700;
        width: 60px;
    }

    .e-popup.e-popup-open.e-dialog {
        border-radius: 20px;
    }

    .e-dialog .e-dlg-header-content {
        background-color: #FF5252;
        border-radius: 20px 20px 0px 0px;
    }

        .e-dialog .e-dlg-header-content + .e-dlg-content {
            padding: 0;
        }

    .e-dialog .e-dlg-header {
        position: relative;
        font-size: 25px;
        font-weight: bold;
        color: linen;
        margin-left: 10px;
    }

    .e-dialog .e-footer-content {
        padding: 15px;
        border-radius: 0px 0px 20px 20px;
    }

    .e-dialog .e-dlg-header-content {
        padding: 6px;
    }

    .dialogText {
        color: #D50000;
        font-size: 20px;
        margin: 44px 11px;
        font-weight: 700;
    }

    .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {
        margin-right: 10px;
    }

    .e-dialog .e-dlg-header-content .e-icon-dlg-close {
        color: #FFFFFF;
        margin-top: 10px;
    }

    .e-dlg-header, .e-dlg-header * {
        color: #FFFFFF;
    }

    /* Fallback for Edge
    -------------------------------------------------- */

</style>
<br />
<br />
<Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(1)">
    <div class="mt-2">
        <div class="container">
            <div class="row">
                <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
                    <div class="card card-signin my-5">
                        <div class="card-body">
                            <h5 class="card-title text-center fw-bold">ĐĂNG NHẬP</h5>
                            <form class="form-signin" @onsubmit="Checklogin">
                                <div class="form-label-group">
                                    <input type="text" id="inputEmail" @bind="@email" class="form-control" placeholder="Email" autofocus required>
                                    <label for="inputEmail">Địa chỉ mail</label>
                                </div>

                                <div class="form-label-group">
                                    <input type="password" id="inputPassword" @bind="@password" class="form-control" placeholder="Mật khẩu" required>
                                    <label for="inputPassword">Mật khẩu</label>
                                </div>

                                <div class="d-grid">
                                    <button class="btn btn-lg btn-dark btn-block text-uppercase" type="submit">Đăng nhập</button>
                                </div>
                                <hr class="my-4">
                                <div class="d-grid gap-2">
                                    <a class="btn btn-lg btn-google btn-block text-uppercase" href="/authentication/login" style="text-decoration:none;">
                                    <i class="fab fa-google mr-2"></i> Đăng nhập với Google</a>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</Animate>

@*<SfDialog Width="500px" Height="250px" IsModal="true" @bind-Visible="IsVisible">
    <DialogTemplates>
        <Header><i class="fa fa-envelope-open" aria-hidden="true"></i> Thông báo !</Header>
        <Content><div class="ds"> Đăng nhập thất bại. Vui lòng kiểm tra lại thông tin</div> </Content>
    </DialogTemplates>
    <DialogAnimationSettings Effect="DialogEffect.FlipXDown" Duration=600 />
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" OnClick="@CloseDialog" />
    </DialogButtons>
</SfDialog>*@

<SfDialog Width="509px" Height="220px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogTemplates>
        <Header><i class="fa fa-exclamation-triangle"></i> Thông báo!</Header>
        <Content>
            <h1 class="dialogText">Đăng nhập thất bại! Tài khoản đã dừng hoạt động!</h1>
        </Content>
        <FooterTemplate>
            <button id="button" @onclick="@CloseDialog" class="e-control e-btn" data-ripple="true">OK</button>
        </FooterTemplate>
    </DialogTemplates>
    <DialogAnimationSettings Effect="DialogEffect.FlipXDown" Duration=600 />
</SfDialog>

@code {
    private bool loading;
    string email = "";
    string password = "";
    private string name;
    public Customer cus;
    private ToastParameters _toastParameters;

    private string Encode(string param)
    {
        return HttpUtility.UrlEncode(param);
    }
    //public void Enter(KeyboardEventArgs e)
    //{
    //    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //    {
    //        if (password != string.Empty || password != "")
    //        {
    //            Checklogin();
    //        }
    //    }
    //}
    private async Task Checklogin()
    {
        _toastParameters = new ToastParameters();
        if (email == "")
        {
            _toastParameters.Add(nameof(Notification.Title), "Vui lòng nhập email!");
            _toastParameters.Add(nameof(Notification.IsSuccess), false);
            toastService.ShowToast<Notification>(_toastParameters);
        }
        if (password == "")
        {
            _toastParameters.Add(nameof(Notification.Title), "Vui lòng nhập mật khẩu!");
            _toastParameters.Add(nameof(Notification.IsSuccess), false);
            toastService.ShowToast<Notification>(_toastParameters);
        }
        if (email != "" && password != "")
        {
            var apiUrl = config.GetSection("API")["APIUrl"].ToString();
            using (var client = new HttpClient())
            {
                ViewWebLogin viewWebLogin = new ViewWebLogin() { Email = email, Password = password };
                client.DefaultRequestHeaders.Add("Access-Control-Alow-Origin", "*");
                StringContent content = new StringContent(JsonConvert.SerializeObject(viewWebLogin),
                    System.Text.Encoding.UTF8,
                    "application/json");
                HttpResponseMessage response = await client.PostAsync(apiUrl + "Token", content);
                if (response.StatusCode != HttpStatusCode.OK)
                {

                }
                else
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    var list = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ViewToken>>(apiResponse);
                    if (list.Count > 0)
                    {
                        var viewToken = list[0];
                        var accessToken = viewToken.Token;
                        if (accessToken != null)
                        {
                            cus = new Customer();
                            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
                            using (var resCus = await client.GetAsync(apiUrl + "Customer/?id=" + viewToken.customerID))
                            {
                                string apiResCus = await resCus.Content.ReadAsStringAsync();
                                cus = JsonConvert.DeserializeObject<Customer>(apiResCus);
                            }
                            if (cus.Status)
                            {
                                sessionStorage.SetItem("CusName", viewToken.customerName);
                                sessionStorage.SetItem("customerId", viewToken.customerID);
                                sessionStorage.SetItem("Email", email);
                                sessionStorage.SetItem("AccessToken", accessToken);
                                NavigationManager.NavigateTo("/", true);
                            }
                            else
                            {
                                OpenDialog();
                            }
                        }
                    }
                    else
                    {
                        _toastParameters.Add(nameof(Notification.Title), "Đăng nhập thất bại! Vui lòng kiểm tra lại thông tin");
                        _toastParameters.Add(nameof(Notification.IsSuccess), false);
                        toastService.ShowToast<Notification>(_toastParameters);
                    }
                }
            }
        }
    }


    private bool IsVisible { get; set; }

    private void OpenDialog()
    {
        IsVisible = true;
    }

    private void CloseDialog()
    {
        IsVisible = false;
    }
}

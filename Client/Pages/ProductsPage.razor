@page "/products"
@using Share.Models
@using Share.Common
@using Blazored.Toast
@using Blazored.Toast.Services
@using Share.Models.ViewModels
@inject IJSRuntime JSRuntime;
@layout WebLayout
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject IToastService toastService
@using Newtonsoft.Json

<style>
    .btn-page {
        color: black;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        margin: 0px 5px 0px 5px;
    }

    .btn-custom {
        color: black;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid black;
        margin: 0px 5px 0px 5px;
    }

    .pagination-bar {
        text-align: center;
    }

    .pagination {
        display: inline-block;
    }
</style>
<link href="/assets/css/products.css" rel="stylesheet" />

<br />
<br />
<br />
<!-- Start Product Area -->
<div class="product-area section">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="section-title">
                    <h2>Sản Phẩm</h2>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="product-info">
                    <div class="nav-main">
                        <!-- Tab Nav -->
                        <ul class="nav nav-tabs" id="myTab" role="tablist">
                            <li class="nav-item"><a class="nav-link @(publicCategory==0?"active":"")" style="cursor:pointer" data-toggle="tab" role="tab" @onclick="async () => {curPage = 1; await LoadProduct(0); }">TẤT CẢ</a></li>
                            <li class="nav-item"><a class="nav-link @(publicCategory==1?"active":"")" style="cursor:pointer" data-toggle="tab" role="tab" @onclick="async () => {curPage = 1; await LoadProduct(1); }">BA LÔ</a></li>
                            <li class="nav-item"><a class="nav-link @(publicCategory==2?"active":"")" style="cursor:pointer" data-toggle="tab" role="tab" @onclick="async () => {curPage = 1; await LoadProduct(2); }">PHỤ KIỆN</a></li>
                        </ul>
                        <!--/ End Tab Nav -->
                    </div>
                    <div class="tab-content" id="myTabContent">
                        <!-- Start Single Tab -->
                        <div class="tab-pane fade show active" id="man" role="tabpanel">
                            <div class="tab-single">
                                <div class="row">
                                    @foreach (var item in products)
                                    {
                                        <div class="col-xl-3 col-lg-4 col-md-6 col-12">
                                            <div class="single-product border border-2 rounded p-2">
                                                <div class="product-img">
                                                    <a href="/detail/@item.ProductId">
                                                        @{
                                                            temp = imgUrl + item.Image;
                                                        }
                                                        <img class="default-img" src="@temp" alt="#">
                                                        <img class="hover-img" src="@temp" alt="#">
                                                    </a>
                                                    <div class="button-head">
                                                        @*<div class="product-action">
                                            <a data-toggle="modal" data-target="#exampleModal" title="Quick View" href="#"><i class=" ti-eye"></i><span>Quick Shop</span></a>
                                        </div>*@
                                                        <div class="product-action-2">
                                                            <a style="cursor:pointer" @onclick="() => AddCart(item.ProductId)">Thêm vào giỏ hàng</a>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="product-content">
                                                    <h5><a style="cursor:pointer" href="/detail/@item.ProductId" class="text-dark">@item.ProductName</a></h5>
                                                    <div class="product-price text-danger">
                                                        <b>@string.Format("{0:#,0}", item.Price) VNĐ</b>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <!--/ End Single Tab -->                      
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-3 pagintaion-bar">
            <div class="pagination">
                <button class="btn btn-outline-danger btn-custom" @onclick="@(async () => await NavigaToPage("prev"))">
                    <i class="fa fa-backward" aria-hidden="true"></i> Trước
                </button>
                @for (int i = startPage; i <= totalPages; i++)
                {
                    var currentPage = i;
                    <button class="btn btn-page pagebutton @(currentPage == curPage? "btn-danger":"")" @onclick="@(async() => await RefreshRecord(currentPage))">
                        @currentPage
                    </button>
                }
                <button class="btn btn-outline-danger btn-custom" @onclick="@(async () => await NavigaToPage("next"))">
                    <i class="fa fa-forward" aria-hidden="true"></i> Tiếp
                </button>
            </div>
        </div>
    </div>
</div>
<!-- End Product Area -->

@code {
    private ToastParameters _toastParameters;
    public List<Product> products;
    public ProductDTO productDTO;
    protected string imgUrl = "";
    protected string temp = "";


    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    public int publicCategory { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("mostPopular");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        pagerSize = 8;
        pageSize = 8;
        curPage = 1;


        productDTO = new ProductDTO();
        products = new List<Product>();
        await LoadProduct(publicCategory);

    }
    public async Task LoadProduct(int category)
    {
        publicCategory = category;
        var apiUrl = config.GetSection("API")["APIUrl"].ToString();
        imgUrl = config.GetSection("API")["ImgUrl"].ToString();
        using (var client = new HttpClient())
        {
            //client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
            client.BaseAddress = new Uri(apiUrl);
            using (var response = await client.GetAsync("paging?PageNumber=" + curPage + "&PageSize=" + pageSize + "&Category=" + category))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                productDTO = Newtonsoft.Json.JsonConvert.DeserializeObject<ProductDTO>(apiResponse);
            }
            products = productDTO.Products;
            totalRecords = productDTO.TotalCount;

            totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);

            SetPagerSize("forward");
        }
    }
    public async Task NavigaToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
                await RefreshRecord(curPage);
            }
        }
        else if (direction == "prev")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
                await RefreshRecord(curPage);
            }
        }

    }
    public async Task RefreshRecord(int currentPage)
    {
        curPage = currentPage;
        await LoadProduct(publicCategory);
    }
    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }
    private void AddCart(int id)
    {
        _toastParameters = new ToastParameters();
        //var cart = HttpContext.Session.GetString("cart");//get key cart
        var cart = sessionStorage.GetItem<string>("cart");//get key cart
        if (cart == null)
        {
            var product = products.Where(u => u.ProductId == id).FirstOrDefault();
            List<CartItem> listCart = new List<CartItem>()
{
                    new CartItem
                    {
                        product = product,
                        Quantity = 1,
                        Price = product.Price
                    }
            };

            Cart orderCart = new Cart()
            {
                ListViewCart = listCart,
                Total = Calculate(listCart)
            };

            sessionStorage.SetItem("cart", JsonConvert.SerializeObject(orderCart));
            _toastParameters.Add(nameof(Notification.Title), "Thêm sản phẩm thành công!");
            _toastParameters.Add(nameof(Notification.IsSuccess), true);
            toastService.ShowToast<Notification>(_toastParameters);
            //HttpContext.Session.SetString("cart", JsonConvert.SerializeObject(listCart));
        }
        else
        {
            var product = products.Where(u => u.ProductId == id).FirstOrDefault();
            Cart orderCart = JsonConvert.DeserializeObject<Cart>(cart);
            bool check = true;
            for (int i = 0; i < orderCart.ListViewCart.Count; i++)
            {
                if (orderCart.ListViewCart[i].product.ProductId == id)
                {
                    orderCart.ListViewCart[i].Quantity++;
                    orderCart.ListViewCart[i].Price = product.Price * orderCart.ListViewCart[i].Quantity;
                    check = false;
                }
            }

            if (check)
            {
                orderCart.ListViewCart.Add(new CartItem
                {
                    product = product,
                    Quantity = 1,
                    Price = product.Price * 1
                });
            }
            orderCart.Total = Calculate(orderCart.ListViewCart);
            sessionStorage.SetItem("cart", JsonConvert.SerializeObject(orderCart));
            _toastParameters.Add(nameof(Notification.Title), "Thêm sản phẩm thành công!");
            _toastParameters.Add(nameof(Notification.IsSuccess), true);
            toastService.ShowToast<Notification>(_toastParameters);
            //HttpContext.Session.SetString("cart", JsonConvert.SerializeObject(dataCart));
        }
    }

    private float Calculate(List<CartItem> listCart)
    {
        float total = 0;
        if (listCart != null)
        {
            for (int i = 0; i < listCart.Count; i++)
            {
                total += listCart[i].Price;
            }
        }
        return total;
    }
}

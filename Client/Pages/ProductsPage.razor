@page "/products"
@using Share.Models
@using Share.Common
@using Share.Models.ViewModels
@layout WebLayout
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config
@using Newtonsoft.Json
@inject Microsoft.JSInterop.IJSRuntime JSRuntime;

<style>

    .product-detail-container {
        position: relative;
    }

    .thumbnail-image {
        border-radius: 10px !important;
    }

    .btn-page {
        color: black;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        margin: 0px 5px 0px 5px;
    }
    .btn-custom {
        color: black;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid black;
        margin: 0px 5px 0px 5px;
    }
    .pagination-bar{
        text-align: center;
    }
    .pagination {
        display: inline-block;
    }
</style>
<br />
<br />
<br />
<Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(1)">
    <section id="product" class="portfolio">
        <div class="container">
            <div class="section-title" data-aos="fade-up">
                <h2>Sản phẩm</h2>
            </div>
            <div class="row portfolio-container" data-aos="fade-up" data-aos-delay="200">
                @foreach (var item in products)
                {                  
                    <div class=" col-3 filter-app">
                        <div class="card ">
                            <div class="image-container ">
                                @{
                                    temp = imgUrl + item.Image;
                                }
                                <img src="@temp" class="img-fluid rounded thumbnail-image">
                                <a href="/detail/@item.ProductId" title="More Details"><i class="bx bx-link"></i></a>

                            </div>
                            <div class="product-detail-container p-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h4 class="dress-name text-center">@item.ProductName </h4>

                                </div>
                            </div>
                            <div class="product-detail-container p-2">
                                <div class="d-flex justify-content-between align-items-center pt-1">
                                    <div class="d-flex flex-column mb-2"> <span class="new-price">@string.Format("{0:#,0}", item.Price) VNĐ</span></div>
                                    <button class="btn btn-dark btn-sm text-right" @onclick="() => AddCart(item.ProductId)">THÊM VÀO GIỎ HÀNG +</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="mt-3 pagintaion-bar">
                <div class="pagination">
                    <button class="btn btn-outline-danger btn-custom" @onclick="@(async () => await NavigaToPage("prev"))">
                        <i class="fa fa-backward" aria-hidden="true"></i> Trước
                    </button>
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        var currentPage = i;
                        <button class="btn btn-page pagebutton @(currentPage == curPage? "btn-danger":"")" @onclick="@(async() => await RefreshRecord(currentPage))">
                            @currentPage
                        </button>
                    }
                    <button class="btn btn-outline-danger btn-custom" @onclick="@(async () => await NavigaToPage("next"))">
                        <i class="fa fa-forward" aria-hidden="true"></i> Tiếp
                    </button>
                </div>
            </div>
        </div>
    </section> 
</Animate>
@code {
    public List<Product> products;
    public ProductDTO productDTO;
    protected string imgUrl = "";
    protected string temp = "";

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;

    protected override async Task OnInitializedAsync()
    {
        pagerSize = 3;
        pageSize = 8;
        curPage = 1;

        productDTO = new ProductDTO();
        products = new List<Product>();
        await LoadProduct();
    }
    public async Task LoadProduct()
    {
        var apiUrl = config.GetSection("API")["APIUrl"].ToString();
        imgUrl = config.GetSection("API")["ImgUrl"].ToString();
        using (var client = new HttpClient())
        {
            //client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
            client.BaseAddress = new Uri(apiUrl);
            using (var response = await client.GetAsync("paging?PageNumber=" + curPage + "&PageSize=" + pageSize))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                productDTO = Newtonsoft.Json.JsonConvert.DeserializeObject<ProductDTO>(apiResponse);
            }
            products = productDTO.Products;
            totalRecords = productDTO.TotalCount;

            totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);

            SetPagerSize("forward");
        }
    }
    public async Task NavigaToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
                await RefreshRecord(curPage);
            }
        }
        else if (direction == "prev")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
                await RefreshRecord(curPage);
            }
        }

    }
    public async Task RefreshRecord(int currentPage)
    {
        curPage = currentPage;
        await LoadProduct();
    }
    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }
    private void AddCart(int id)
    {
        //var cart = HttpContext.Session.GetString("cart");//get key cart
        var cart = sessionStorage.GetItem<string>("cart");//get key cart
        if (cart == null)
        {
            var product = products.Where(u => u.ProductId == id).FirstOrDefault();
            List<CartItem> listCart = new List<CartItem>()
{
                    new CartItem
                    {
                        product = product,
                        Quantity = 1,
                        Price = product.Price
                    }
            };

            Cart orderCart = new Cart()
            {
                ListViewCart = listCart,
                Total = Calculate(listCart)
            };

            sessionStorage.SetItem("cart", JsonConvert.SerializeObject(orderCart));
            //HttpContext.Session.SetString("cart", JsonConvert.SerializeObject(listCart));
        }
        else
        {
            var product = products.Where(u => u.ProductId == id).FirstOrDefault();
            Cart orderCart = JsonConvert.DeserializeObject<Cart>(cart);
            bool check = true;
            for (int i = 0; i < orderCart.ListViewCart.Count; i++)
            {
                if (orderCart.ListViewCart[i].product.ProductId == id)
                {
                    orderCart.ListViewCart[i].Quantity++;
                    orderCart.ListViewCart[i].Price = product.Price * orderCart.ListViewCart[i].Quantity;
                    check = false;
                }
            }

            if (check)
            {
                orderCart.ListViewCart.Add(new CartItem
                {
                    product = product,
                    Quantity = 1,
                    Price = product.Price * 1
                });
            }
            orderCart.Total = Calculate(orderCart.ListViewCart);
            sessionStorage.SetItem("cart", JsonConvert.SerializeObject(orderCart));

            //HttpContext.Session.SetString("cart", JsonConvert.SerializeObject(dataCart));
        }
    }

    private float Calculate(List<CartItem> listCart)
    {
        float total = 0;
        if (listCart != null)
        {
            for (int i = 0; i < listCart.Count; i++)
            {
                total += listCart[i].Price;
            }
        }
        return total;
    }
}

@page "/history"
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net;
@using Share.Models;
@using Microsoft.AspNetCore.Components.Authorization
@layout WebLayout;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject IModalService modal

<style>
    .lastest-product {
    }
</style>
<br />
<br />
<br />
<div class="latest-products text-center">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="section-heading h2 text-center">LỊCH SỬ ĐẶT HÀNG</div>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            Khách hàng
                        </th>
                        <th>
                            Ngày đặt
                        </th>
                        <th>
                            Tổng tiền
                        </th>
                        <th>
                            Trạng thái
                        </th>
                        <th>
                            Ghi chú
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in orders)
                    {
                        <tr>
                            <td>
                                @item.Customer.Email
                            </td>
                            <td>
                                @item.OrderDate.ToString("dd/MM/yyyy")
                            </td>
                            <td>
                                @string.Format("{0:#,0}", item.Total)
                            </td>
                            <td>
                                @if (item.OrderStatus == OrderStatus.CurOrder)
                                {
                                    <span>Mới đặt</span>
                                }
                                else if (item.OrderStatus == OrderStatus.Delivering)
                                {
                                    <span>Đang giao</span>
                                }
                                else
                                {
                                    <span>Đã giao</span>
                                }
                            </td>
                            <td>
                                @item.Notes
                            </td>
                            <td>
                                <a class="btn btn-light btn-user btn" @onclick="@(() => ShowOrderDetail(item.OrderId))">Chi tiết đơn hàng</a>
                                <a class="btn btn-light btn-user btn" @onclick="@(() => ShowShipInfo(item.OrderId))">Thông tin vận chuyển</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private string email;
    // tao bien mail Goole
    private string emailGoogle;
    public List<Order> orders = new List<Order>();
    public Share.Models.ViewModels.Cart giohang;
    public Customer customer;
    // tao bien State xac thuc
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    private double total = 0;
    protected string imgUrl = "";
    protected string temp = "";

    protected override async Task OnInitializedAsync()
    {
        // gan = mail Goole
        emailGoogle = AuthStat.Result.User.Claims.Where(_ => _.Type == "email").Select(_ => _.Value).FirstOrDefault();
        email = sessionStorage.GetItem<string>("Email");
        int customerId = sessionStorage.GetItem<int>("customerId");
        imgUrl = config.GetSection("API")["ImgUrl"].ToString();
        var accessToken = sessionStorage.GetItem<string>("AccessToken");
        var apiUrl = config.GetSection("API")["APIUrl"].ToString();
        imgUrl = config.GetSection("API")["ImgUrl"].ToString();
        orders = new List<Order>();
        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new
            System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
            client.BaseAddress = new Uri(apiUrl);
            // Tạo mới object Cusomer
            customer = new Customer();
            // neu maillGG không null va rỗng thì get customer bằng email rồi gán customerId = customer.customerId được get từ db
            if (emailGoogle != null && emailGoogle != "")
            {
                using (var response = await client.GetAsync("Customer/GetCustomerbyMail/?email=" + emailGoogle))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    customer = Newtonsoft.Json.JsonConvert.DeserializeObject<Customer>(apiResponse);
                }
                customerId = customer.CustomerId;
            }
            using (var response = await client.GetAsync("Order/?id=" + customerId))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                orders = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Order>>(apiResponse);
            }
        }
    }
    void ShowOrderDetail(int orderId)
    {
        var parameter = new ModalParameters();
        parameter.Add(nameof(OrderDetails.id), orderId.ToString());
        modal.Show<OrderDetails>("Chi tiết đơn hàng", parameter);
    }
    void ShowShipInfo(int orderId)
    {
        var parameterr = new ModalParameters();
        parameterr.Add(nameof(ShipInfoPage.id), orderId.ToString());
        modal.Show<ShipInfoPage>("Thông tin vận chuyển", parameterr);
    }
}
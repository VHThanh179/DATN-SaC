@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject SignOutSessionStateManager SignOutManager
@inherits LayoutComponentBase
@inject IModalService modal
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject IJSRuntime JSRuntime
@using Pages
<AuthorizeView>
    <Authorized>
        @if (bool.Parse(context.User.Claims.Where(_ => _.Type == "firstLogin").Select(_ => _.Value).FirstOrDefault()))
        {
            <style>
                .blazored-modal {
                    width: 960px;
                }

                main {
                    min-height: 500px;
                }

                .blazored-toast-container {
                    z-index: 200;
                }

                #button {
                    background-color: #E53935;
                    border: none;
                    border-radius: 5px;
                    color: #FFFFFF;
                    font-weight: 700;
                    width: 60px;
                }

                .e-popup.e-popup-open.e-dialog {
                    border-radius: 20px;
                }

                .e-dialog .e-dlg-header-content {
                    background-color: #FF5252;
                    border-radius: 20px 20px 0px 0px;
                }

                    .e-dialog .e-dlg-header-content + .e-dlg-content {
                        padding: 0;
                    }

                .e-dialog .e-dlg-header {
                    position: relative;
                    font-size: 25px;
                    font-weight: bold;
                    color: linen;
                    margin-left: 10px;
                }

                .e-dialog .e-footer-content {
                    padding: 15px;
                    border-radius: 0px 0px 20px 20px;
                }

                .e-dialog .e-dlg-header-content {
                    padding: 6px;
                }

                .dialogText {
                    color: #D50000;
                    font-size: 22px;
                    margin: 51px 26px 20px;
                    font-weight: 700;
                }

                .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {
                    margin-right: 10px;
                }

                .e-dialog .e-dlg-header-content .e-icon-dlg-close {
                    color: #FFFFFF;
                }

                .e-dlg-header, .e-dlg-header * {
                    color: #FFFFFF;
                }
            </style>
        }
    </Authorized>
</AuthorizeView>
<style>
    .blazored-modal {
        width: 960px;
    }

    main {
        min-height: 500px;
    }

    .blazored-toast-container {
        z-index: 200;
    }
</style>

<AuthorizeView>
    <Authorized>
        @if (bool.Parse(context.User.Claims.Where(_ => _.Type == "firstLogin").Select(_ => _.Value).FirstOrDefault()))
        {

            <SfDialog Width="509px" Height="220px" IsModal="true" @bind-Visible="IsVisible">
                <DialogTemplates>
                    <Header><i class="fa fa-exclamation-triangle"></i> Thông báo</Header>
                    <Content>
                        <h1 class="dialogText">Vui lòng cập nhật đầy đủ thông tin cá nhân!</h1>
                    </Content>
                    <FooterTemplate>
                        <button id="button" @onclick="@(() => Confirm(context.User.Claims.Where(_ => _.Type == "email").Select(_ => _.Value).FirstOrDefault()))" class="e-control e-btn" data-ripple="true">OK</button>
                    </FooterTemplate>
                </DialogTemplates>
                <DialogAnimationSettings Effect="DialogEffect.FlipXDown" Duration=600 />
            </SfDialog>
        }
    </Authorized>
</AuthorizeView>

<header id="header" class="fixed-top d-flex align-items-center">
    <div class="container d-flex align-items-center">

        <div class="logo me-auto">
            <h1><a href="/">SaC Backpack</a></h1>
            <!-- Uncomment below if you prefer to use an image logo -->
            <!-- <a href="index.html"><img src="assets/img/hero-img.png" alt="" class="img-fluid"></a>-->
        </div>

        <nav id="navbar" class="navbar order-last order-lg-0">
            <ul>
                <li><a href="/" class="nav-link scrollto" style="cursor:pointer" onclick="document.getElementById('hero').scrollIntoView({behavior:'smooth'})">Trang chủ</a></li>

                <li><a href="/products" class="nav-link scrollto" style="cursor:pointer">Sản phẩm</a></li>
                <li>
                    <a class="nav-link scrollto" style="cursor:pointer" @onclick="@(() => modal.Show<CartLayout>("Thông tin giỏ hàng"))">Giỏ hàng</a>
                </li>
                <AuthorizeView>
                    <Authorized>
                        <li class="dropdown">
                            <a style="cursor:pointer"><span>@context.User.Identity.Name</span> <i class="bi bi-chevron-down"></i></a>
                            <ul>
                                <li><a class="nav-link scrollto" href="/info/@context.User.Claims.Where(_ => _.Type == "email").Select(_ => _.Value).FirstOrDefault()">Thông tin cá nhân</a></li>
                                <li><a class="nav-link scrollto" href="/history">Lịch sử đặt hàng</a></li>
                                <li><a class="nav-link scrollto" style="cursor:pointer" @onclick="BeginSignOut">Đăng xuất</a></li>
                            </ul>
                        </li>
                    </Authorized>
                    <NotAuthorized>
                        @if (emailAddress != null && emailAddress != "")
                        {
                            <li class="dropdown">
                                <a style="cursor:pointer"><span>@cusName</span> <i class="bi bi-chevron-down"></i></a>
                                <ul>
                                    <li><a class="nav-link scrollto" href="/info/@customerId">Thông tin cá nhân</a></li>
                                    <li><a class="nav-link scrollto" href="/history">Lịch sử đặt hàng</a></li>
                                    <li><a class="nav-link scrollto" href="/changepass">Đổi mật khẩu</a></li>
                                    <li><a class="nav-link scrollto" href="/logout">Đăng xuất</a></li>
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="dropdown">
                                <a style="cursor:pointer"><span>Tài khoản</span> <i class="bi bi-chevron-down"></i></a>
                                <ul>
                                    <li><a class="nav-link" href="/login">Đăng nhập</a></li>
                                    <li><a class="nav-link" href="/register">Đăng ký</a></li>
                                </ul>
                            </li>
                        }
                    </NotAuthorized>
                </AuthorizeView>

            </ul>
            <i class="bi bi-list mobile-nav-toggle" @onclick="@(async () => await ChangeMenu())"></i>

        </nav><!-- .navbar -->
    </div>
</header><!-- End Header -->

<main id="main">
    @Body
</main>
<CascadingBlazoredModal HideHeader="true" />
<BlazoredToasts Position="Blazored.Toast.Configuration.ToastPosition.TopRight" Timeout="2" />
<!-- ======= Footer ======= -->
<footer id="footer">
    <div class="footer-top">
        <div class="container">
            <div class="row">

                <div class="col-lg-3 col-md-6">
                    <div class="footer-info">
                        <h3>SaC Backpack</h3>
                        <p>
                            CVPM Quang Trung <br>
                            Quận 12, TP. HCM<br><br>

                        </p>
                    </div>
                </div>

                <div class="col-lg-3 col-md-6 footer-links">
                    <h4>LỐI TẮT</h4>
                    <ul>
                        <li><i class="bx bx-chevron-right"></i> <a href="/">Trang chủ</a></li>
                        <li><i class="bx bx-chevron-right"></i> <a href="/login">Đăng nhập</a></li>
                    </ul>
                </div>
                <div class="col-lg-3 col-md-6 footer-links">
                    <h4>DỊCH VỤ CỦA CHÚNG TÔI</h4>
                    <ul>
                        <li><i class="bx bx-chevron-right"></i> <a href="/products">Sản phẩm</a></li>
                    </ul>
                </div>
                <div class="col-lg-3 col-md-6 footer-newsletter">
                    <h4>LIÊN HỆ</h4>
                    <strong>SĐT:</strong> 033 278 0105<br>
                    <strong>Email:</strong> web.sacbackpack@gmail.com<br>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="credits">

            Designed by <b>4Dev</b>
        </div>
    </div>
</footer><!-- End Footer -->
<!-- Modal -->

@code{
    string emailAddress;
    string cusName;
    int customerId;
    public Customer cus;
    private bool IsVisible { get; set; }

    protected async Task ChangeMenu()
    {
        await JSRuntime.InvokeVoidAsync("changeMenu");
    }
    protected override async Task OnInitializedAsync()
    {
        IsVisible = true;
        await JSRuntime.InvokeVoidAsync("mainJS");
        emailAddress = sessionStorage.GetItem<string>("Email");
        customerId = sessionStorage.GetItem<int>("customerId");
        if (customerId != 0)
        {
            var apiUrl = config.GetSection("API")["APIUrl"].ToString();
            var accessToken = sessionStorage.GetItem<string>("AccessToken");
            cus = new Customer();
            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
                client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
                client.BaseAddress = new Uri(apiUrl);
                using (var response = await client.GetAsync("Customer/?id=" + customerId))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    cus = JsonConvert.DeserializeObject<Customer>(apiResponse);
                }
                cusName = cus.FullName;
            }
        }

    }

    private void Confirm(string link)
    {
        navigationManager.NavigateTo("/info/" + link);
        IsVisible = false;
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        navigationManager.NavigateTo($"authentication/logout");
    }

}

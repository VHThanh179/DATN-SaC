@page "/userdialog/{id}"
@using Share.Models
@using Blazored.Toast
@using Blazored.Toast.Services
@inject Share.Interfaces.IUserSvc _userService
@inject NavigationManager navigation
@inject IToastService toastService
@inject IJSRuntime JSRuntime


<div class="container">
    <div class="row">
        <div class="col-xl-8 mx-auto">
            <div class="card card-signin flex-row shadow-lg card-signup">
                <div class="card-body">
                    <h2 class="card-title text-center font-weight-bold text-uppercase">@Tilte</h2>
                    <div class="col-md-12">
                        <form asp-action="Create" class="form-signin">
                            <EditForm Model="@user" OnValidSubmit="@SubmitForm">
                                <DataAnnotationsValidator />
                                <input type="hidden" @bind="user.UserId" />
                                @if (id == "0")
                                {
                                    <div class="col-10 mx-auto">
                                        <div class="form-label-group">
                                            <label class="control-label">Tên đăng nhập</label>
                                            <input @bind="user.UserName" class="form-control" />
                                            <ValidationMessage For="@(() => user.UserName)" />
                                        </div>

                                        @if (isUserNameExisted)
                                        {
                                            <span class="text-danger">Tên đăng nhập đã tồn tại!</span>
                                        }

                                        <div class="form-label-group mt-3">
                                            <label class="control-label">Họ tên</label>
                                            <input @bind="user.FullName" class="form-control" />
                                            <ValidationMessage For="@(() => user.FullName)" />
                                        </div>

                                        <div class="form-label-group mt-3">
                                            <label class="control-label">Email</label>
                                            <input @bind="user.Email" class="form-control" />
                                            <ValidationMessage For="@(() => user.Email)" />
                                        </div>

                                        @if (isEmailExisted)
                                        {
                                            <span class="text-danger">Email đã tồn tại!</span>
                                        }

                                        <div class="form-label-group mt-3">
                                            <label class="control-label">Ngày sinh</label>
                                            <input type="date" @bind="user.DoB" class="form-control" />
                                            <ValidationMessage For="@(() => user.DoB)" />
                                        </div>

                                        <div class="form-label-group mt-3">
                                            <label class="control-label">Chức vụ</label>
                                            <InputSelect @bind-Value="@user.Roles" class="form-control">
                                                <option value="@Role.Manager">Quản lý</option>
                                                <option value="@Role.Staff">Nhân viên</option>
                                            </InputSelect>
                                        </div>

                                        <div class="form-label-group mt-3">
                                            <label class="control-label">Mật khẩu</label>
                                            <input type="password" @bind="user.Password" class="form-control" />
                                            <ValidationMessage For="@(() => user.Password)" />
                                        </div>

                                        <div class="form-label-group mt-3">
                                            <label class="control-label">Mật khẩu 2</label>
                                            <input type="password" @bind="user.ConfirmPass" class="form-control" />
                                            <ValidationMessage For="@(() => user.ConfirmPass)" />
                                        </div>
                                        <div class="form-label-group mt-3 text-center">
                                            <button type="submit" class="btn btn-info">Lưu</button>
                                            <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Thoát" />
                                        </div>
                                    </div>

                                }
                                else
                                {
                                    <div class="form-label-group row">
                                        <label class="control-label col-5">Tên đăng nhập</label>
                                        <span class="font-weight-bold col-7">@user.UserName</span>
                                    </div>

                                    <div class="form-label-group mt-3 row">
                                        <label class="control-label col-5">Họ tên</label>
                                        <input @bind="user.FullName" class="form-control col-5" />
                                        <ValidationMessage For="@(() => user.FullName)" />
                                    </div>

                                    <div class="form-label-group mt-3 row">
                                        <label class="control-label col-5">Email</label>
                                        <span class="font-weight-bold col-7">@user.Email</span>
                                    </div>

                                    <div class="form-label-group mt-3 row">
                                        <label class="control-label col-5">Ngày sinh</label>
                                        <input type="date" @bind="user.DoB" class="form-control col-5" />
                                        <ValidationMessage For="@(() => user.DoB)" />
                                    </div>

                                    <div class="form-label-group mt-3 row">
                                        <label class="control-label col-5">Chức vụ</label>
                                        <InputSelect @bind-Value="@user.Roles" class="form-control col-5">
                                            <option value="@Role.Manager">Quản lý</option>
                                            <option value="@Role.Staff">Nhân viên</option>
                                        </InputSelect>
                                    </div>

                                    <div class="form-label-group mt-3 form-check">
                                        <label class="form-check-label">
                                            <input type="checkbox" class="form-check-input" @bind="user.Status" /> Hoạt động
                                        </label>
                                    </div>
                                    <div class="form-label-group mt-3">
                                        <button type="submit" class="btn btn-info">Lưu</button>
                                        <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Thoát" />
                                    </div>
                                }

                            </EditForm>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string id { get; set; }
    public bool isUserNameExisted = false;
    public bool isEmailExisted = false;
    private Share.Models.User user { get; set; }
    private ToastParameters _toastParameters;
    private string Tilte = "";
    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(id) || id == "0")
        {
            Tilte = "Thêm người dùng";
            user = new Share.Models.User();
            user.DoB = new DateTime(1970, 01, 01);
        }
        else
        {
            Tilte = "Sửa người dùng";
            user = _userService.GetUser(int.Parse(id));
        }
    }
    private async void SubmitForm()
    {
        _toastParameters = new ToastParameters();
        if (user.UserId == 0)
        {
            if (!_userService.CheckEmail(user.Email) && !_userService.CheckUserName(user.UserName))
            {
                int ret = _userService.AddUser(user);
                if (ret != 0)
                {
                    _toastParameters.Add(nameof(Notification.Title), "Thêm người dùng thành công!");
                    _toastParameters.Add(nameof(Notification.IsSuccess), true);
                    toastService.ShowToast<Notification>(_toastParameters);
                    navigation.NavigateTo("UserList");
                }
                else
                {
                    _toastParameters.Add(nameof(Notification.Title), "Thêm người dùng thất bại!");
                    _toastParameters.Add(nameof(Notification.IsSuccess), false);
                    toastService.ShowToast<Notification>(_toastParameters);
                }
            }
            else
            {
                if (_userService.CheckEmail(user.Email))
                {
                    isEmailExisted = true;
                }
                else
                {
                    isEmailExisted = false;
                }
                if (_userService.CheckUserName(user.UserName))
                {
                    isUserNameExisted = true;
                }
                else
                {
                    isUserNameExisted = false;
                }
            }
        }
        else
        {
            int ret = _userService.EditUser(user.UserId, user);
            if (ret != 0)
            {
                _toastParameters.Add(nameof(Notification.Title), "Chỉnh sửa người dùng thành công!");
                _toastParameters.Add(nameof(Notification.IsSuccess), true);
                toastService.ShowToast<Notification>(_toastParameters);
                await JSRuntime.InvokeVoidAsync("RefreshUser.refreshData");
            }
            else
            {
                _toastParameters.Add(nameof(Notification.Title), "Chỉnh sửa người dùng thất bại!");
                _toastParameters.Add(nameof(Notification.IsSuccess), false);
                toastService.ShowToast<Notification>(_toastParameters);
            }
        }
    }
    private void Cancel()
    {
        navigation.NavigateTo("UserList", true);

    }

}
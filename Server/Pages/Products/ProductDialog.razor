@page "/productdialog/{id}"
@using Share.Models
@using System.IO;
@using Blazored.Toast
@using Blazored.Toast.Services
@using Microsoft.AspNetCore.Hosting
@using Syncfusion.Blazor.RichTextEditor
@layout MainLayout
@inject Share.Interfaces.IProductSvc _productSvc
@inject NavigationManager navigation
@inject IWebHostEnvironment env
@inject IModalService modal
@inject IToastService toastService
@inject IJSRuntime JSRuntime

<style>
    .my-custom-scrollbar {
        position: relative;
        height: 650px;
        overflow: auto;
    }

    .textEditorScroll {
        position: relative;
        height: 175px;
        overflow: auto;
    }

    .table-wrapper-scroll-y {
        display: block;
    }

    main {
        height: 650px;
    }
</style>
<main class="row table-wrapper-scroll-y my-custom-scrollbar">
    <div class="col-10 m-auto">
        <EditForm Model="@product" OnValidSubmit="@SubmitForm">
            <DataAnnotationsValidator />
            <input type="hidden" @bind="product.ProductId" />
            <div class="row">
                <div class="form-group col-6">
                    <label class="control-label">Tên sản phẩm</label>
                    <input @bind="product.ProductName" class="form-control" />
                    <ValidationMessage For="@(() => product.ProductName)" />
                </div>

                <div class="form-group col-6">
                    <label class="control-label">Giá</label>
                    <input @bind="product.Price" class="form-control" />
                    <ValidationMessage For="@(() => product.Price)" />
                </div>
            </div>

            <div class="row">
                @*Phần hình ảnh*@
                <div class="form-group col-6">
                    <label class="control-label">Phân loại</label>
                    <InputSelect @bind-Value="@product.Category" class="form-control">
                        <option value="@Category.Backpack">Ba lô</option>
                        <option value="@Category.Accessories">Phụ kiện</option>
                    </InputSelect>
                </div>
                <div class="form-group col-6">
                    <label class="control-label">Trạng thái</label>
                    <select @bind="status" class="form-control" required>
                        <option value="">Chọn trạng thái</option>
                        <option value="true">Còn hàng</option>
                        <option value="false">Hết hàng</option>
                    </select>
                </div>
            </div>

            <div class="row">
                <div class="form-group col-6">
                    <label class="control-label">Chọn hình</label>
                    <InputFile class="form-control" OnChange="OnInputFileChange" accept=".png,.jpeg,.jpg" />
                    @if (isOverSized)
                    {
                        <span class="text-danger">Kích thước ảnh phải nhỏ hơn 1 MB</span>
                    }
                </div>
                @if (product.Image != null)
                {
                    <div class="form-group col-6">
                        <img src="images/Product/@product.Image" style="height:100px" />
                    </div>
                }
            </div>
            <div class="row">
                <div class="form-group col-12">
                    <label class="control-label">
                        Thông tin mô tả
                    </label>
                    <div class="textEditorScroll table-wrapper-scroll-y">
                        <SfRichTextEditor @bind-Value="product.Description">
                            <RichTextEditorToolbarSettings Items="Toolbars" />
                        </SfRichTextEditor>
                        <ValidationMessage For="@(() => product.Description)" />
                    </div>
                </div>
            </div>
            <div class="form-group text-center">
                @if (id == "0")
                {
                    <button type="submit" class="btn btn-info">Thêm</button>
                }
                else
                {
                    <button type="submit" class="btn btn-info">Cập nhật</button>
                }
                <input type="button" class="ml-2 btn btn-primary" @onclick="@Cancel" value="Thoát" />
            </div>
        </EditForm>
    </div>
</main>




@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter]
    public string id { get; set; }

    private string status = null;
    public bool isOverSized { get; set; }

    private ToastParameters _toastParameters;
    private Product product { get; set; }
    IReadOnlyList<IBrowserFile> selectedFiles;

    public List<ToolbarItemModel> Toolbars = new List<ToolbarItemModel>()
{
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
        };


    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(id) || id == "0")
        {
            product = new Product();
            product.Status = true;
        }
        else
        {
            product = _productSvc.GetProduct(int.Parse(id));
            if (product.Status == true)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
    }

    private async void SubmitForm()
    {
        _toastParameters = new ToastParameters();
        if (selectedFiles != null && selectedFiles.Count > 0)
        {
            var roothPath = $"{env.WebRootPath}\\images";
            if (!Directory.Exists(roothPath))
            {
                Directory.CreateDirectory(roothPath);
            }

            string dirPath = roothPath + @"\" + "Product";
            if (!Directory.Exists(dirPath))
            {
                Directory.CreateDirectory(dirPath);
            }

            var file = selectedFiles[0];
            if (file.Size < 1000000)
            {
                string filePath = dirPath + @"\" + file.Name;
                {
                    Stream stream = file.OpenReadStream(1000000);
                    FileStream fs = File.Create(filePath);
                    await stream.CopyToAsync(fs);
                    stream.Close();
                    fs.Close();
                }
                product.Image = file.Name;
            }
            else
            {
                isOverSized = true;
            }
        }

        product.Status = bool.Parse(status);
        int ret = 0;
        if (product.ProductId == 0)
        {
            if (selectedFiles != null && selectedFiles.Count > 0)
            {
                ret = _productSvc.AddProduct(product);
                if (ret != 0)
                {
                    _toastParameters.Add(nameof(Notification.Title), "Thêm sản phẩm thành công!");
                    _toastParameters.Add(nameof(Notification.IsSuccess), true);
                    toastService.ShowToast<Notification>(_toastParameters);
                    navigation.NavigateTo("productlist");
                    await JSRuntime.InvokeVoidAsync("RefeshProducts.refreshData");
                }
                else
                {
                    _toastParameters.Add(nameof(Notification.Title), "Thêm sản phẩm thất bại!");
                    _toastParameters.Add(nameof(Notification.IsSuccess), false);
                    toastService.ShowToast<Notification>(_toastParameters);
                }
            }
            else
            {
                //isChosen = true;
                _toastParameters.Add(nameof(Notification.Title), "Vui lòng chọn hình ảnh!");
                _toastParameters.Add(nameof(Notification.IsSuccess), false);
                toastService.ShowToast<Notification>(_toastParameters);
            }
        }
        else
        {
            ret = _productSvc.EditProduct(product.ProductId, product);
            if (ret != 0)
            {
                _toastParameters.Add(nameof(Notification.Title), "Chỉnh sửa sản phẩm thành công!");
                _toastParameters.Add(nameof(Notification.IsSuccess), true);
                toastService.ShowToast<Notification>(_toastParameters);
                navigation.NavigateTo("productlist");
                await JSRuntime.InvokeVoidAsync("RefeshProducts.refreshData");
            }
            else
            {
                _toastParameters.Add(nameof(Notification.Title), "Chỉnh sửa sản phẩm thất bại!");
                _toastParameters.Add(nameof(Notification.IsSuccess), false);
                toastService.ShowToast<Notification>(_toastParameters);
            }
        }
    }
    private void Cancel()
    {
        //navigation.NavigateTo("productlist", true);
        ModalInstance.CloseAsync(ModalResult.Ok<Product>(product));
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
    }
}

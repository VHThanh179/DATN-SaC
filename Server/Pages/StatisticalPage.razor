@page "/statistical"
@using Share.Models
@inject Share.Interfaces.IStatisticalSvc _statisticalSvc;

    <!-- Main Content -->
<div id="content">
    <!-- Begin Page Content -->
    <div class="container-fluid">
        <!-- Page Heading -->
        <h1 class="font-weight-bold text-center m-4">Bảng thống kê</h1>
        @if (statisticals == null)
        {
            <p><em>Đang tải ...</em></p>
        }
        else
        {
            <table class="table table-hover text-center">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col" style="cursor: pointer" @onclick="@(()=>StatisticalSorting(" StatisticalMonth"))">Tháng</th>
                        <th scope="col" style="cursor: pointer" @onclick="@(()=>StatisticalSorting(" QuantityRegister"))">Số lượng đăng ký</th>
                        <th scope="col" style="cursor: pointer" @onclick="@(()=>StatisticalSorting(" QuantityOrder"))">Số lượng đơn hàng</th>
                        <th scope="col" style="cursor: pointer" @onclick="@(()=>StatisticalSorting(" Revenue"))">Doanh thu</th>
                        <th scope="col" style="cursor: pointer" @onclick="@(()=>StatisticalSorting(" Transport"))">Vận chuyển</th>
                        <th scope="col" style="cursor: pointer" @onclick="@(()=>StatisticalSorting(" TotalRevenue"))">Tổng doanh thu</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in statisticals)
                    {
                        <tr>
                            <td>@item.StatisticalMonth</td>
                            <td>@item.QuantityRegister</td>
                            <td>@item.QuantityOrder</td>
                            <td>@string.Format("{0:#,0}", item.Revenue)</td>
                            <td>@string.Format("{0:#,0}", item.Transport)</td>
                            <td>@string.Format("{0:#,0}", item.TotalRevenue)</td>
                        </tr>
                    }
                    <br>
                    @foreach (var item in totalStatistical)
                    {
                        <tr>
                            <th>TỔNG: </th>
                            <th>@string.Format("{0:#,0}", item.TotalQuantityRegister)</th>
                            <th>@string.Format("{0:#,0}", item.TotalQuantityOrder)</th>
                            <th>@string.Format("{0:#,0}", item.TotalRevenue)</th>
                            <th>@string.Format("{0:#,0}", item.TotalTransport)</th>
                            <th>@string.Format("{0:#,0}", item.TotalAllRevenue)</th>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <h1 class="font-weight-bold text-center">Thống kê</h1>
        <div class="d-flex justify-content-end mt-4">
            <div class="input-group col-4">
                <div class="input-group-prepend ">
                    <span class="input-group-text">Thời gian bắt đầu:</span>
                </div>
                <input type="date" class="form-control" value="@StartDate" @onchange="@((ChangeEventArgs e) => StartDate = e.Value.ToString())" />
            </div>
            <div class="input-group col-4">
                <div class="input-group-prepend">
                    <span class="input-group-text">Thời gian kết thúc:</span>
                </div>
                <input type="date" class="form-control" value="@EndDate" @onchange="@((ChangeEventArgs e) => EndDate = e.Value.ToString())" />
            </div>
            <button class="btn btn-primary form-control mr-3 col-1 font-weight-bold" @onclick="SearchStatistical" disabled="@(string.IsNullOrEmpty(StartDate.ToString()) && string.IsNullOrEmpty(EndDate.ToString()))">Tìm</button>
        </div>
        <div class="d-flex justify-content-end m-3">
            <select name="cars" class="custom-select col-5" value="@CategoryOption" @onchange="TypeofStatistical">
                <option value="">Chọn thể loại thống kê</option>
                <option value="QuantityRegister">Số lượng đăng ký</option>
                <option value="QuantityOrder">Số lượng đơn hàng</option>
                <option value="Revenue">Doanh thu</option>
                <option value="Transport">Vận chuyển</option>
                <option value="TotalRevenue">Tổng doanh thu</option>
            </select>
        </div>
        @if (CategoryOption == "QuantityRegister")
        {
            <SfChart Title="Số lượng khách đăng ký">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Tháng"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Title="Số lượng khách đăng ký"></ChartPrimaryYAxis>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                <ChartSeriesCollection>
                    <ChartSeries Type="ChartSeriesType.Column" DataSource="@statisticals"
                                    XName="StatisticalMonth" YName="QuantityRegister">
                        <ChartMarker>
                            <ChartDataLabel Visible="true"></ChartDataLabel>
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            </SfChart>
        }
        else if (CategoryOption == "QuantityOrder")
        {
            <SfChart Title="Số lượng đơn hàng">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Tháng"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Title="Số lượng đơn hàng"></ChartPrimaryYAxis>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                <ChartSeriesCollection>
                    <ChartSeries Type="ChartSeriesType.Column" DataSource="@statisticals"
                                    XName="StatisticalMonth" YName="QuantityOrder">
                        <ChartMarker>
                            <ChartDataLabel Visible="true"></ChartDataLabel>
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            </SfChart>
        }
        else if (CategoryOption == "Revenue")
        {
            <SfChart Title="Doanh thu">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Tháng"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Title="Doanh thu (VNĐ)"></ChartPrimaryYAxis>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                <ChartSeriesCollection>
                    <ChartSeries Type="ChartSeriesType.Column" DataSource="@statisticals"
                                    XName="StatisticalMonth" YName="Revenue">
                        <ChartMarker>
                            <ChartDataLabel Visible="true"></ChartDataLabel>
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            </SfChart>
        }
        else if (CategoryOption == "Transport")
        {
            <SfChart Title="Vận chuyển">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Tháng"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Title="Vận chuyển (VNĐ)"></ChartPrimaryYAxis>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                <ChartSeriesCollection>
                    <ChartSeries Type="ChartSeriesType.Column" DataSource="@statisticals"
                                    XName="StatisticalMonth" YName="Transport">
                        <ChartMarker>
                            <ChartDataLabel Visible="true"></ChartDataLabel>
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            </SfChart>
        }
        else if (CategoryOption == "SearchStatistical")
        {
            <SfChart>
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Tháng"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Title="Doanh thu (VNĐ)"></ChartPrimaryYAxis>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                <ChartSeriesCollection>
                    <ChartSeries Type="ChartSeriesType.Column" DataSource="@statisticals"
                                    XName="StatisticalMonth" YName="TotalRevenue">
                        <ChartMarker>
                            <ChartDataLabel Visible="true"></ChartDataLabel>
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            </SfChart>
        }
        else
        {
            <SfChart Title="Tổng doanh thu">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Tháng"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Title="Tổng doanh thu (VNĐ)"></ChartPrimaryYAxis>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                <ChartSeriesCollection>
                    <ChartSeries Type="ChartSeriesType.Column" DataSource="@statisticals"
                                    XName="StatisticalMonth" YName="TotalRevenue">
                        <ChartMarker>
                            <ChartDataLabel Visible="true"></ChartDataLabel>
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            </SfChart>
        }
    </div>
</div>
<!-- Scroll to Top Button-->
<a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
</a>

@code{
    public List<Statistical> statisticals { get; set; }
    public List<TotalStatistical> totalStatistical { get; set; }
    public string CategoryOption { get; set; }
    public string StartDate { get; set; }
    public string EndDate { get; set; }
    int ids = 0;

    protected override void OnInitialized()
    {
        StartDate = DateTime.Now.ToString();
        EndDate = DateTime.Now.ToString();
        statisticals = _statisticalSvc.GetAllStatistical();
        totalStatistical = _statisticalSvc.GetTotalStatistical();
    }

    protected void TypeofStatistical(ChangeEventArgs args)
    {
        CategoryOption = args.Value.ToString();
        statisticals = _statisticalSvc.GetAllStatistical();
    }

    protected void SearchStatistical()
    {
        statisticals = _statisticalSvc.SearchStatistical(DateTime.Parse(StartDate), DateTime.Parse(EndDate));
        CategoryOption = "SearchStatistical";
    }

    protected void StatisticalSorting(string SortColumn)
    {
        statisticals = _statisticalSvc.GetAllStatistical();
        if (ids == 0)
        {
            ids = 1;
            switch (SortColumn)
            {
                case "StatisticalMonth":
                    statisticals = statisticals.OrderBy(x => x.StatisticalMonth).ToList();
                    break;
                case "QuantityRegister":
                    statisticals = statisticals.OrderBy(x => x.QuantityRegister).ToList();
                    break;
                case "QuantityOrder":
                    statisticals = statisticals.OrderBy(x => x.QuantityOrder).ToList();
                    break;
                case "Revenue":
                    statisticals = statisticals.OrderBy(x => x.Revenue).ToList();
                    break;
                case "Transport":
                    statisticals = statisticals.OrderBy(x => x.Transport).ToList();
                    break;
                case "TotalRevenue":
                    statisticals = statisticals.OrderBy(x => x.TotalRevenue).ToList();
                    break;
            }
        }
        else
        {
            ids = 0;

            switch (SortColumn)
            {
                case "StatisticalMonth":
                    statisticals = statisticals.OrderByDescending(x => x.StatisticalMonth).ToList();
                    break;
                case "QuantityRegister":
                    statisticals = statisticals.OrderByDescending(x => x.QuantityRegister).ToList();
                    break;
                case "QuantityOrder":
                    statisticals = statisticals.OrderByDescending(x => x.QuantityOrder).ToList();
                    break;
                case "Revenue":
                    statisticals = statisticals.OrderByDescending(x => x.Revenue).ToList();
                    break;
                case "Transport":
                    statisticals = statisticals.OrderByDescending(x => x.Transport).ToList();
                    break;
                case "TotalRevenue":
                    statisticals = statisticals.OrderByDescending(x => x.TotalRevenue).ToList();
                    break;
            }
        }
    }
}

@using Pages
@using Share.Models
@using System.Security.Claims
@using Blazored.Toast
@using Blazored.Toast.Services
@using Microsoft.AspNetCore.SignalR.Client;
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject Share.Interfaces.IUserSvc _userService
@inject IToastService toastService

<style>
    .blazored-modal {
        width: 960px;
        height: 700px;
    }
    #content-wrapper {
        margin-left: 215px; /* Same as the width of the sidebar */
        padding: 0px 10px;
    }
    .sidenav {
        position: fixed; /* Fixed Sidebar (stay in place on scroll) */
        z-index: 1; /* Stay on top */
        top: 0; /* Stay at the top */
        left: 0;
        overflow-x: hidden; /* Disable horizontal scroll */
    }
</style>

<div>
    <div class="sidenav">
        <NavMenu />
    </div>
    <div id="wrapper">
        <div id="content-wrapper" class="d-flex flex-column">
            <div id="content">
                <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
                    <ul class="navbar-nav ml-auto">
                        <!-- Nav Item - Search Dropdown (Visible Only XS) -->
                        <li class="nav-item dropdown no-arrow d-sm-none">
                            <a class="nav-link dropdown-toggle" href="#" id="searchDropdown" role="button"
                               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fas fa-search fa-fw"></i>
                            </a>
                            <!-- Dropdown - Messages -->
                            <div class="dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in"
                                 aria-labelledby="searchDropdown">
                                <form class="form-inline mr-auto w-100 navbar-search">
                                    <div class="input-group">
                                        <input type="text" class="form-control bg-light border-0 small"
                                               placeholder="Search for..." aria-label="Search"
                                               aria-describedby="basic-addon2">
                                        <div class="input-group-append">
                                            <button class="btn btn-primary" type="button">
                                                <i class="fas fa-search fa-sm"></i>
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </li>

                        <!-- Nav Item - User Information -->
                        <li class="nav-item dropdown no-arrow">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button"
                               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">@fullName</span>
                                <img class="img-profile rounded-circle"
                                     src="img/undraw_profile.svg">
                            </a>
                            <!-- Dropdown - User Information -->
                            <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in"
                                 aria-labelledby="userDropdown">
                                <AuthorizeView>
                                    <Authorized>
                                        <a class="dropdown-item" href="/userinfo/@context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value">
                                            <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                                            Thông tin cá nhân
                                        </a>
                                    </Authorized>
                                </AuthorizeView>

                                <AuthorizeView>
                                    <Authorized>
                                        <a class="dropdown-item" href="/userlog/@context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value">
                                            <i class="fas fa-list fa-sm fa-fw mr-2 text-gray-400"></i>
                                            Hoạt động đăng nhập
                                        </a>
                                    </Authorized>
                                </AuthorizeView>

                                <a class="dropdown-item" href="/changepass">
                                    <i class="fas fa-cogs fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Đổi mật khẩu
                                </a>

                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal">
                                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Đăng xuất
                                </a>
                            </div>
                        </li>
                    </ul>
                </nav>
                <div class="container-fluid">
                    @Body
                </div>
            </div>
        </div>
    </div>
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>
    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Thoát khỏi hệ thống?</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">Bạn có chắc muốn đăng xuất khỏi hệ thống ?</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Hủy</button>
                    <a class="btn btn-primary" href="/logout?returnUrl=/">Đăng xuất</a>
                </div>
            </div>
        </div>
    </div>

</div>
@*</div>*@

<BlazoredToasts Position="Blazored.Toast.Configuration.ToastPosition.TopRight" Timeout="3" />
<CascadingBlazoredModal />

@code{
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    public string fullName { get; set; }
    public Notifi notifi { get; set; }
    private HubConnection hubConnection = null;
    private ToastParameters _toastParameters;
    private string content = "Closed";
    private string contentNotification = "No content";
    private bool IsConnected = false;

    protected async override Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(AuthStat.Result.User.FindFirst(ClaimTypes.NameIdentifier)?.Value))
        {
            var userInfo = _userService.GetUser(int.Parse(AuthStat.Result.User.FindFirst(ClaimTypes.NameIdentifier)?.Value));
            fullName = userInfo.FullName;

            // SignalR realtime
            _toastParameters = new ToastParameters();
            hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:44370/api/NewNoti").Build();
            await hubConnection.StartAsync();
            IsConnected = true;
            Console.WriteLine("Connected");
            hubConnection.Closed += async (s) =>
            {
                IsConnected = false;
                Console.WriteLine("Disconnected");
                await hubConnection.StartAsync();
                IsConnected = true;
            };
            hubConnection.On<string>("Notification", content =>
            {
                contentNotification = content;
                _toastParameters.Add(nameof(Notification.Title), contentNotification);
                _toastParameters.Add(nameof(Notification.IsSuccess), true);
                toastService.ShowToast<Notification>(_toastParameters);
                StateHasChanged();
            });
        }
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"Login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        }
    }
}